{"version":3,"sources":["components/Sidebar/Sidebar.module.scss","components/AddNewAbstract/AddNewAbstract.module.scss","components/Sidebar/NavItem/NavItem.module.scss","components/Content/Abstracts.module.scss","components/Sidebar/AddNew/AddNew.module.scss","components/AddNewAbstract/AddNewAbstract.jsx","components/Content/Abstract/Abstract.jsx","components/Content/Abstracts.jsx","components/Sidebar/AddNew/AddNew.jsx","components/Sidebar/NavItem/NavItem.jsx","components/Sidebar/Sidebar.jsx","App.js","serviceWorker.js","redux/state.js","index.js"],"names":["module","exports","AddNewAbstract","props","state","editor","React","useRef","title","exact","path","link","className","s","addNewAbstract","action","abstractEditor","ref","value","editorValue","onChange","current","newAbstractValue","updateFieldsValue","cols","rows","nameValue","titleValue","type","name","addAbstract","onClick","Abstract","content","Abstracts","abstracts","map","e","newAbstract","AddNew","addNewBtn","to","text","NavItem","navItem","navLink","activeClassName","navLink__active","Sidebar","navItems","sidebar","currentLang","nav","navList","App","getState","Boolean","window","location","hostname","match","store","_state","id","this","_subscriber","bind","currentId","length","NavLink","newNavLink","push","console","log","subscribe","subscriber","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,IAAM,qBAAqB,QAAU,2B,gBCArID,EAAOC,QAAU,CAAC,eAAiB,uCAAuC,YAAc,sC,gBCAxFD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,gBAAkB,mC,yBCAvED,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,4B,0MC6CfC,EA1CQ,SAACC,GAEtB,IAAIC,EAAQD,EAAMC,MACdC,EAASC,IAAMC,OAAO,MACtBC,EAAQF,IAAMC,OAAO,MAazB,OACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAMP,EAAMQ,MACvB,yBAAKC,UAAWC,IAAEC,gBAChB,iIACA,0BAAMC,OAAO,IACX,8BACEH,UAAWC,IAAEG,eACbC,IAAKZ,EACLa,MAAOd,EAAMe,YACbC,SAlBW,WACf,IAAID,EAAcd,EAAOgB,QAAQH,MACjCd,EAAMkB,iBAAiBC,kBAAkBJ,EAAa,gBAiBlDK,KAAK,KAAKC,KAAK,OAEjB,2BACER,IAAKT,EACLU,MAAOd,EAAMsB,UACbN,SApBU,WACd,IAAIO,EAAanB,EAAMa,QAAQH,MAC/Bd,EAAMkB,iBAAiBC,kBAAkBI,EAAY,eAmBjDC,KAAK,OAAOC,KAAK,WAGrB,4BAAQjB,UAAWC,IAAEiB,YAAaC,QA/BnB,WACf3B,EAAMU,mBA8BN,wG,iBCvBOkB,G,MAbE,SAAC7B,GAChB,OACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAMP,EAAMQ,MACvB,4BACGR,EAAMK,OAET,6BACGL,EAAM8B,YCOAC,EAbG,SAAC/B,GACjB,IAAIgC,EAAYhC,EAAMC,MAAM6B,QAAQG,KAAI,SAAAC,GACtC,OAAO,kBAAC,EAAD,CAAU1B,KAAM0B,EAAE1B,KAAMH,MAAO6B,EAAE7B,MAAOyB,QAASI,EAAEJ,aAG5D,OACE,yBAAKrB,UAAWC,IAAEsB,WACfA,EACD,kBAAC,EAAD,CAAgB/B,MAAOD,EAAMC,MAAMkC,YAAa3B,KAAK,e,wBCA5C4B,EAVA,SAACpC,GACd,OACE,yBAAKS,UAAWC,IAAE2B,WAChB,kBAAC,IAAD,CAASC,GAAItC,EAAMQ,MAChBR,EAAMuC,Q,gBCSAC,EAXC,SAACxC,GACf,OACE,wBAAIS,UAAWC,IAAE+B,SACf,kBAAC,IAAD,CAASH,GAAItC,EAAMQ,KAAMC,UAAWC,IAAEgC,QAASC,gBAAiBjC,IAAEkC,iBAC/D5C,EAAMK,S,gBCcAwC,EAlBC,SAAC7C,GACf,IAAI8C,EAAW9C,EAAMC,MAAMgC,KAAI,SAAAC,GAC7B,OAAO,kBAAC,EAAD,CAAS1B,KAAM0B,EAAE1B,KAAMH,MAAO6B,EAAE7B,WAGzC,OACE,yBAAKI,UAAWC,IAAEqC,SAChB,wBAAItC,UAAWC,IAAEsC,aAAjB,sBACA,yBAAKvC,UAAWC,IAAEuC,KAChB,wBAAIxC,UAAWC,IAAEwC,SACdJ,IAGL,kBAAC,EAAD,CAAQtC,KAAK,WAAW+B,KAAK,kHCLpBY,EATH,SAACnD,GACX,OACE,yBAAKS,UAAU,OACb,kBAAC,EAAD,CAASR,MAAOD,EAAMC,MAAMmD,WAAWL,UACvC,kBAAC,EAAD,CAAW9C,MAAOD,EAAMC,MAAMmD,WAAWpB,cCI3BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCClBFC,EAAQ,CACVC,OAAQ,CACN3B,UAAW,CACTF,QAAS,CACP,CACE8B,GAAI,aACJpD,KAAM,cACNH,MAAO,mDACPyB,QAAS,+CAGbK,YAAa,CACXhB,iBAAkB,CAChBK,WAAY,GACZR,YAAa,GACbI,kBAHgB,SAGEL,EAAOmB,GACvB2B,KAAK3B,GAAKnB,EACV,WACE8C,KAAKC,eACJC,KAAKL,EAFR,KAKJ/C,eAXW,WAYT,IAAIK,EAAc6C,KAAK1C,iBAAiBH,YACpCQ,EAAaqC,KAAK1C,iBAAiBK,YACvC,WACE,IAAIwC,EAAYH,KAAKF,OAAO3B,UAAUF,QAAQmC,OAAS,EACjDC,EACJ,aAAc,oBACZL,KAAKD,GAAKI,EACVH,KAAKrD,KAAO,aAAewD,EAC3BH,KAAKxD,MAAQmB,GAUbW,EAAc,IAhBR,kDAUR,aAAc,IAAD,8BACX,gBACKL,QAAUd,EAFJ,EAVL,UASakD,IAQnBC,EAAa,IAAID,EAErBL,KAAKF,OAAO3B,UAAUF,QAAQsC,KAAKjC,GACnC0B,KAAKF,OAAOZ,QAAQqB,KAAKD,GACzBE,QAAQC,IAAIH,EAAWhC,GACvB0B,KAAKC,gBACJC,KAAKL,EAvBR,MA2BNX,QAAS,CACP,CACEa,GAAI,aACJpD,KAAM,cACNH,MAAO,sDAIb+C,SA5DU,WA6DR,OAAOS,KAAKF,QAEdG,YA/DU,WAgERO,QAAQC,IAAI,8BAEdC,UAlEU,SAkEAxD,GACR8C,KAAKC,YAAc/C,IAGR2C,IC7DXc,EAAa,WACfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAK1E,MAAOyD,MAGhBkB,SAASC,eAAe,UAG5BL,IACAd,EAAMa,UAAUC,GF+GV,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMC,c","file":"static/js/main.c9ebd9dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__2d6yM\",\"currentLang\":\"Sidebar_currentLang__33iDc\",\"nav\":\"Sidebar_nav__3V3Ln\",\"navList\":\"Sidebar_navList__1kHhF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"abstractEditor\":\"AddNewAbstract_abstractEditor__2Q-S7\",\"addAbstract\":\"AddNewAbstract_addAbstract__1IwTu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLink\":\"NavItem_navLink__1_JWt\",\"navLink__active\":\"NavItem_navLink__active__1DNbm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"abstracts\":\"Abstracts_abstracts__1Q_zI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addNewBtn\":\"AddNew_addNewBtn__3Dx8t\"};","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport s from './AddNewAbstract.module.scss';\r\n\r\nconst AddNewAbstract = (props) => {\r\n\r\n  let state = props.state,\r\n      editor = React.useRef(null),\r\n      title = React.useRef(null),\r\n      addNewAbstract = () => {\r\n        state.addNewAbstract();\r\n      },\r\n      onEditorChange = () => {\r\n        let editorValue = editor.current.value;\r\n        state.newAbstractValue.updateFieldsValue(editorValue, 'editorValue');\r\n      },\r\n      onTitleChange = () => {\r\n        let titleValue = title.current.value;\r\n        state.newAbstractValue.updateFieldsValue(titleValue, 'titleValue');\r\n      };\r\n\r\n  return (\r\n    <Route exact path={props.link}>\r\n      <div className={s.addNewAbstract}>\r\n        <h2>Добавить конспект</h2>\r\n        <form action=\"\">\r\n          <textarea\r\n            className={s.abstractEditor}\r\n            ref={editor}\r\n            value={state.editorValue}\r\n            onChange={onEditorChange}\r\n            cols=\"90\" rows=\"25\"\r\n          />\r\n          <input\r\n            ref={title}\r\n            value={state.nameValue}\r\n            onChange={onTitleChange}\r\n            type=\"text\" name=\"title\"\r\n          />\r\n        </form>\r\n        <button className={s.addAbstract} onClick={addNewAbstract}>Добавить конспект</button>\r\n      </div>\r\n    </Route>\r\n  )\r\n};\r\n\r\nexport default AddNewAbstract;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport s from './Abstract.module.scss';\r\n\r\nconst Abstract = (props) => {\r\n  return (\r\n    <Route exact path={props.link}>\r\n      <h2>\r\n        {props.title}\r\n      </h2>\r\n      <div>\r\n        {props.content}\r\n      </div>\r\n    </Route>\r\n  )\r\n};\r\n\r\nexport default Abstract;","import React from 'react';\r\nimport AddNewAbstract from './../AddNewAbstract/AddNewAbstract';\r\nimport s from './Abstracts.module.scss';\r\nimport Abstract from './Abstract/Abstract';\r\n\r\nconst Abstracts = (props) => {\r\n  let abstracts = props.state.content.map(e => {\r\n    return <Abstract link={e.link} title={e.title} content={e.content} />\r\n  });\r\n\r\n  return (\r\n    <div className={s.abstracts}>\r\n      {abstracts}\r\n      <AddNewAbstract state={props.state.newAbstract} link=\"/add-new\" />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Abstracts;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './AddNew.module.scss';\r\nconst AddNew = (props) => {\r\n  return (\r\n    <div className={s.addNewBtn}>\r\n      <NavLink to={props.link}>\r\n        {props.text}\r\n      </NavLink>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default AddNew;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './NavItem.module.scss'\r\n\r\n\r\nconst NavItem = (props) => {\r\n  return (\r\n    <li className={s.navItem}>\r\n      <NavLink to={props.link} className={s.navLink} activeClassName={s.navLink__active}>\r\n        {props.title}\r\n      </NavLink>\r\n    </li>\r\n  )\r\n};\r\n\r\n\r\nexport default NavItem;","import React from 'react';\r\nimport AddNew from './AddNew/AddNew';\r\nimport NavItem from './NavItem/NavItem';\r\nimport s from './Sidebar.module.scss';\r\n\r\nconst Sidebar = (props) => {\r\n  let navItems = props.state.map(e => {\r\n    return <NavItem link={e.link} title={e.title} />\r\n  });\r\n\r\n  return (\r\n    <div className={s.sidebar}>\r\n      <h1 className={s.currentLang}> =&lt;&lt;JavaScript&gt;&gt;= </h1>\r\n      <nav className={s.nav}>\r\n        <ul className={s.navList}>\r\n          {navItems}\r\n        </ul>\r\n      </nav>\r\n      <AddNew link=\"/add-new\" text=\"~~>+ Добавить конспект +<~~\" />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport Abstracts from './components/Content/Abstracts';\r\nimport Sidebar from './components/Sidebar/Sidebar'\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Sidebar state={props.state.getState().sidebar} />\r\n      <Abstracts state={props.state.getState().abstracts}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let store = {\r\n  _state: {\r\n    abstracts: {\r\n      content: [\r\n        {\r\n          id: 'abstract-1',\r\n          link: '/abstract-1',\r\n          title: 'Название',\r\n          content: 'Контент'\r\n        }\r\n      ],\r\n      newAbstract: {\r\n        newAbstractValue: {\r\n          titleValue: \"\",\r\n          editorValue: \"\",\r\n          updateFieldsValue(value, e) {\r\n            this[e] = value;\r\n            (function() {\r\n              this._subscriber();\r\n            }).bind(store)();\r\n          }\r\n        },\r\n        addNewAbstract() {\r\n          let editorValue = this.newAbstractValue.editorValue,\r\n              titleValue = this.newAbstractValue.titleValue;\r\n          (function() {\r\n            let currentId = this._state.abstracts.content.length + 1;\r\n            class NavLink{\r\n              constructor(){\r\n                this.id = currentId;\r\n                this.link = \"/abstract-\" + currentId;\r\n                this.title = titleValue;\r\n              }\r\n            };\r\n            class Abstract extends NavLink{\r\n              constructor(){\r\n                super();\r\n                this.content = editorValue;\r\n              }\r\n            };\r\n        \r\n            let newAbstract = new Abstract(),\r\n                newNavLink = new NavLink();\r\n        \r\n            this._state.abstracts.content.push(newAbstract);\r\n            this._state.sidebar.push(newNavLink);\r\n            console.log(newNavLink,newAbstract);\r\n            this._subscriber();\r\n          }).bind(store)();\r\n        }\r\n      }\r\n    },\r\n    sidebar: [\r\n      {\r\n        id: 'abstract-1',\r\n        link: '/abstract-1',\r\n        title: 'Название'\r\n      }\r\n    ]\r\n  },\r\n  getState() {\r\n    return this._state;\r\n  },\r\n  _subscriber() {\r\n    console.log('Your App has been changed');\r\n  },\r\n  subscribe(value) {\r\n    this._subscriber = value;\r\n  }\r\n}\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport globalStyle from './App.css'\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport store from './redux/state';\r\n\r\nlet subscriber = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <BrowserRouter>\r\n        <App state={store} />\r\n      </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n}\r\nsubscriber();\r\nstore.subscribe(subscriber)\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}